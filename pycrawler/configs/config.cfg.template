# This file has been automatically generated on {{ timestamp }}.
# Feel free to adjust it as needed.
import os
import datetime
from mdpms.configs.default import DefaultConfig


# Flask Settings
# ------------------------------
# There is a whole bunch of more settings available here:
# http://flask.pocoo.org/docs/0.11/config/#builtin-configuration-values
DEBUG = {{ is_debug }}
TESTING = False

# Server Name - REQUIRED for Celery/Mailing
# The name and port number of the server.
# Required for subdomain support (e.g.: 'myapp.dev:5000') and
# URL generation without a request context but with an application context
# which we need in order to generate URLs (with the celery application)
# Note that localhost does not support subdomains so setting this to
# “localhost” does not help.
# Example for the FlaskBB forums: SERVER_NAME = "forums.flaskbb.org"
SERVER_NAME = "{{ server_name }}"

# Prefer HTTPS over HTTP
PREFERRED_URL_SCHEME = {% if use_https %}"https"{% else %}"http"{%endif%}

# Don't send secure cookies over an unencrypted connection ()
SESSION_COOKIE_SECURE = {% if use_https %}True{% else %}False{%endif%}
# Don't make cookies available to JS (XSS) - browsers hide httpOnly cookies from JS
SESSION_COOKIE_HTTPONLY = True


# Database
# ------------------------------
# For PostgresSQL:
#SQLALCHEMY_DATABASE_URI = "postgresql://flaskbb@localhost:5432/flaskbb"
# For SQLite:
SQLALCHEMY_DATABASE_URI = "{{ database_uri }}"

# This option will be removed as soon as Flask-SQLAlchemy removes it.
# At the moment it is just used to suppress the super annoying warning
SQLALCHEMY_TRACK_MODIFICATIONS = False
# This will print all SQL statements
SQLALCHEMY_ECHO = False


# Security - IMPORTANT
# ------------------------------
# This is the secret key that is used for session signing.
# You can generate a secure key with os.urandom(24)
SECRET_KEY = "{{ secret_key }}"

# You can generate the WTF_CSRF_SECRET_KEY the same way as you have
# generated the SECRET_KEY. If no WTF_CSRF_SECRET_KEY is provided, it will
# use the SECRET_KEY.
WTF_CSRF_ENABLED = True
WTF_CSRF_SECRET_KEY = "{{ csrf_secret_key }}"


# Logging Settings
# ------------------------------
# This config section will deal with the logging settings
# for FlaskBB, adjust as needed.

# Logging Config Path
# see https://docs.python.org/library/logging.config.html#logging.config.fileConfig
# for more details. Should either be None or a path to a file
# If this is set to a path, consider setting USE_DEFAULT_LOGGING to False
# otherwise there may be interactions between the log configuration file
# and the default logging setting.
#
# If set to a file path, this should be an absolute file path
{% if log_config_path %}
LOG_CONF_FILE = "{{ log_config_path }}"
{% else %}
LOG_CONF_FILE = None
{% endif %}

# Path to store the INFO and ERROR logs
# If None this defaults to flaskbb/logs
#
# If set to a file path, this should be an absolute path
LOG_PATH = os.path.join(DefaultConfig.basedir, 'logs')

# The default logging configuration that will be used when
# USE_DEFAULT_LOGGING is set to True
LOG_DEFAULT_CONF = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'standard': {
            'format': '%(asctime)s %(levelname)-7s %(name)-25s %(message)s'
        },
        'advanced': {
            'format': '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
        }
    },

    'handlers': {
        'console': {
            'level': 'NOTSET',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
        },
        'mdpms': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'mdpms.log'),
            'mode': 'a',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
        },

        'infolog': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'info.log'),
            'mode': 'a',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
        },
        'errorlog': {
            'level': 'ERROR',
            'formatter': 'standard',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'error.log'),
            'mode': 'a',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
        }
    },

    'loggers': {
        'flask.app': {
            'handlers': ['infolog', 'errorlog'],
            'level': 'INFO',
            'propagate': True
        },
        'mdpms': {
            'handlers': ['console', 'mdpms'],
            'level': 'WARNING',
            'propagate': True
        },
    }
}

# When set to True this will enable the default
# FlaskBB logging configuration which uses the settings
# below to determine logging
USE_DEFAULT_LOGGING = True

# If SEND_LOGS is set to True, the admins (see the mail configuration) will
# recieve the error logs per email.
SEND_LOGS = False
